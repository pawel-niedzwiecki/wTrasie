# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Upload` scalar type represents a file upload.
scalar Upload

type Error {
  code: String!
  message: String
}

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentContentPartsLeadFiltersInput {
  lead: StringFilterInput
  and: [ComponentContentPartsLeadFiltersInput]
  or: [ComponentContentPartsLeadFiltersInput]
  not: ComponentContentPartsLeadFiltersInput
}

input ComponentContentPartsLeadInput {
  id: ID
  lead: String
}

type ComponentContentPartsLead {
  id: ID!
  lead: String!
}

input ComponentContentPartsMapsFiltersInput {
  url: StringFilterInput
  and: [ComponentContentPartsMapsFiltersInput]
  or: [ComponentContentPartsMapsFiltersInput]
  not: ComponentContentPartsMapsFiltersInput
}

input ComponentContentPartsMapsInput {
  id: ID
  url: String
}

type ComponentContentPartsMaps {
  id: ID!
  url: String!
}

type ComponentContentPartsMedia {
  id: ID!
  media: UploadFileEntityResponse!
}

type ComponentContentPartsQuote {
  id: ID!
  quote: String!
}

type ComponentContentPartsTxt {
  id: ID!
  txt: String!
}

type ComponentContentPartsYouTube {
  id: ID!
  gallery(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection!
}

type ComponentContentPartsYoutube {
  id: ID!
  url: String!
}

type ComponentFooterColumn {
  id: ID!
  link(
    filters: ComponentOthersLinkFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersLink]
  header: String
}

enum ENUM_COMPONENTOTHERSADRESS_TYP {
  primmary
  secondary
}

input ComponentOthersAdressFiltersInput {
  street: StringFilterInput
  numberStreet: StringFilterInput
  apartmentNumber: StringFilterInput
  postCode: StringFilterInput
  shortname: TagFiltersInput
  googleMaps: ComponentContentPartsMapsFiltersInput
  phones: ComponentOthersPhoneFiltersInput
  emails: ComponentOthersEmailFiltersInput
  typ: StringFilterInput
  and: [ComponentOthersAdressFiltersInput]
  or: [ComponentOthersAdressFiltersInput]
  not: ComponentOthersAdressFiltersInput
}

input ComponentOthersAdressInput {
  id: ID
  street: String
  numberStreet: String
  apartmentNumber: String
  postCode: String
  shortname: ID
  googleMaps: ComponentContentPartsMapsInput
  phones: [ComponentOthersPhoneInput]
  emails: [ComponentOthersEmailInput]
  typ: ENUM_COMPONENTOTHERSADRESS_TYP
}

type ComponentOthersAdress {
  id: ID!
  street: String!
  numberStreet: String!
  apartmentNumber: String
  postCode: String!
  shortname: TagEntityResponse
  googleMaps: ComponentContentPartsMaps
  phones(
    filters: ComponentOthersPhoneFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersPhone]
  emails(
    filters: ComponentOthersEmailFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersEmail]
  typ: ENUM_COMPONENTOTHERSADRESS_TYP
}

enum ENUM_COMPONENTOTHERSCOMPANYDATA_TYP {
  dzialalnosc_gospodarcza
  spolka_cywilna
  spolka_z_ograniczona_odpowiedzialnoscia
  spolka_akcyjna
}

input ComponentOthersCompanyDataFiltersInput {
  companyName: StringFilterInput
  nip: StringFilterInput
  regon: StringFilterInput
  krs: StringFilterInput
  typ: StringFilterInput
  and: [ComponentOthersCompanyDataFiltersInput]
  or: [ComponentOthersCompanyDataFiltersInput]
  not: ComponentOthersCompanyDataFiltersInput
}

input ComponentOthersCompanyDataInput {
  id: ID
  companyName: String
  nip: String
  regon: String
  krs: String
  typ: ENUM_COMPONENTOTHERSCOMPANYDATA_TYP
}

type ComponentOthersCompanyData {
  id: ID!
  companyName: String!
  nip: String!
  regon: String
  krs: String
  typ: ENUM_COMPONENTOTHERSCOMPANYDATA_TYP
}

input ComponentOthersEmailFiltersInput {
  email: StringFilterInput
  and: [ComponentOthersEmailFiltersInput]
  or: [ComponentOthersEmailFiltersInput]
  not: ComponentOthersEmailFiltersInput
}

input ComponentOthersEmailInput {
  id: ID
  email: String
}

type ComponentOthersEmail {
  id: ID!
  email: String!
}

enum ENUM_COMPONENTOTHERSLINK_TARGET {
  blank
  self
  parent
  top
}

enum ENUM_COMPONENTOTHERSLINK_REL {
  alternate
  author
  bookmark
  canonical
  dns_prefetch
  external
  help
  icon
  license
  manifest
  me
  modulepreload
  next
  nofollow
  noopener
  noreferrer
  opener
  pingback
  preconnect
  prefetch
  preload
  prerender
  prev
  search
  stylesheet
  tag
}

input ComponentOthersLinkFiltersInput {
  title: StringFilterInput
  url: StringFilterInput
  target: StringFilterInput
  rel: StringFilterInput
  and: [ComponentOthersLinkFiltersInput]
  or: [ComponentOthersLinkFiltersInput]
  not: ComponentOthersLinkFiltersInput
}

type ComponentOthersLink {
  id: ID!
  title: String
  url: String
  target: ENUM_COMPONENTOTHERSLINK_TARGET
  rel: ENUM_COMPONENTOTHERSLINK_REL
}

type ComponentOthersLinksList {
  id: ID!
  title: String
  link(
    filters: ComponentOthersLinkFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersLink]!
}

enum ENUM_COMPONENTOTHERSPAGESSOCIALMEDIA_TYP {
  page
  shop
  facebook
  twitter
  youtube
  tiktok
}

input ComponentOthersPagesSocialMediaFiltersInput {
  typ: StringFilterInput
  url: StringFilterInput
  and: [ComponentOthersPagesSocialMediaFiltersInput]
  or: [ComponentOthersPagesSocialMediaFiltersInput]
  not: ComponentOthersPagesSocialMediaFiltersInput
}

input ComponentOthersPagesSocialMediaInput {
  id: ID
  typ: ENUM_COMPONENTOTHERSPAGESSOCIALMEDIA_TYP
  url: String
}

type ComponentOthersPagesSocialMedia {
  id: ID!
  typ: ENUM_COMPONENTOTHERSPAGESSOCIALMEDIA_TYP
  url: String!
}

enum ENUM_COMPONENTOTHERSPHONE_TYP {
  mobile
  home
  fax
}

input ComponentOthersPhoneFiltersInput {
  phone: StringFilterInput
  typ: StringFilterInput
  and: [ComponentOthersPhoneFiltersInput]
  or: [ComponentOthersPhoneFiltersInput]
  not: ComponentOthersPhoneFiltersInput
}

input ComponentOthersPhoneInput {
  id: ID
  phone: String
  typ: ENUM_COMPONENTOTHERSPHONE_TYP
}

type ComponentOthersPhone {
  id: ID!
  phone: String!
  typ: ENUM_COMPONENTOTHERSPHONE_TYP
}

input ComponentOthersSeoFiltersInput {
  title: StringFilterInput
  description: StringFilterInput
  and: [ComponentOthersSeoFiltersInput]
  or: [ComponentOthersSeoFiltersInput]
  not: ComponentOthersSeoFiltersInput
}

input ComponentOthersSeoInput {
  id: ID
  title: String
  description: String
}

type ComponentOthersSeo {
  id: ID!
  title: String
  description: String
}

input ComponentOthersSettingPageFiltersInput {
  page: StringFilterInput
  seo: ComponentOthersSeoFiltersInput
  filter: ComponentOthersSiteBarFiltersFiltersInput
  and: [ComponentOthersSettingPageFiltersInput]
  or: [ComponentOthersSettingPageFiltersInput]
  not: ComponentOthersSettingPageFiltersInput
}

input ComponentOthersSettingPageInput {
  id: ID
  page: String
  seo: ComponentOthersSeoInput
  filter: [ComponentOthersSiteBarFiltersInput]
}

type ComponentOthersSettingPage {
  id: ID!
  page: String!
  seo: ComponentOthersSeo!
  filter(
    filters: ComponentOthersSiteBarFiltersFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersSiteBarFilters]!
}

enum ENUM_COMPONENTOTHERSSITEBARFILTERS_TYP {
  tags
  articles
  clients
  users
}

input ComponentOthersSiteBarFiltersFiltersInput {
  title: StringFilterInput
  slug: StringFilterInput
  typ: StringFilterInput
  key: StringFilterInput
  and: [ComponentOthersSiteBarFiltersFiltersInput]
  or: [ComponentOthersSiteBarFiltersFiltersInput]
  not: ComponentOthersSiteBarFiltersFiltersInput
}

input ComponentOthersSiteBarFiltersInput {
  id: ID
  title: String
  slug: String
  typ: ENUM_COMPONENTOTHERSSITEBARFILTERS_TYP
  key: String
}

type ComponentOthersSiteBarFilters {
  id: ID!
  title: String!
  slug: String!
  typ: ENUM_COMPONENTOTHERSSITEBARFILTERS_TYP!
  key: String
}

input ComponentStatsViewsFiltersInput {
  views: IntFilterInput
  and: [ComponentStatsViewsFiltersInput]
  or: [ComponentStatsViewsFiltersInput]
  not: ComponentStatsViewsFiltersInput
}

input ComponentStatsViewsInput {
  id: ID
  views: Int
}

type ComponentStatsViews {
  id: ID!
  views: Int!
}

enum ENUM_ARTICLE_TYPE {
  article
  service
}

union ArticleContentpartsDynamicZone =
    ComponentContentPartsTxt
  | ComponentContentPartsMedia
  | ComponentContentPartsQuote
  | ComponentContentPartsYoutube
  | Error

scalar ArticleContentpartsDynamicZoneInput

input ArticleFiltersInput {
  id: IDFilterInput
  type: StringFilterInput
  title: StringFilterInput
  lead: ComponentContentPartsLeadFiltersInput
  views: ComponentStatsViewsFiltersInput
  tags: TagFiltersInput
  authors: UsersPermissionsUserFiltersInput
  seo: ComponentOthersSeoFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ArticleFiltersInput]
  or: [ArticleFiltersInput]
  not: ArticleFiltersInput
}

input ArticleInput {
  type: ENUM_ARTICLE_TYPE
  title: String
  cover: ID
  lead: ComponentContentPartsLeadInput
  contentparts: [ArticleContentpartsDynamicZoneInput!]
  views: ComponentStatsViewsInput
  tags: [ID]
  authors: [ID]
  seo: ComponentOthersSeoInput
  publishedAt: DateTime
}

type Article {
  id: String
  type: ENUM_ARTICLE_TYPE!
  title: String!
  cover: UploadFileEntityResponse!
  lead: ComponentContentPartsLead!
  contentparts: [ArticleContentpartsDynamicZone]!
  views: ComponentStatsViews!
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TagRelationResponseCollection
  authors(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  seo: ComponentOthersSeo!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ArticleEntity {
  id: ID
  attributes: Article
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

input ClientFiltersInput {
  id: IDFilterInput
  branches: ComponentOthersAdressFiltersInput
  companyData: ComponentOthersCompanyDataFiltersInput
  pagesAndSocialMedia: ComponentOthersPagesSocialMediaFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ClientFiltersInput]
  or: [ClientFiltersInput]
  not: ClientFiltersInput
}

input ClientInput {
  branches: [ComponentOthersAdressInput]
  companyData: ComponentOthersCompanyDataInput
  pagesAndSocialMedia: [ComponentOthersPagesSocialMediaInput]
  publishedAt: DateTime
}

type Client {
  branches(
    filters: ComponentOthersAdressFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersAdress]
  companyData: ComponentOthersCompanyData
  pagesAndSocialMedia(
    filters: ComponentOthersPagesSocialMediaFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersPagesSocialMedia]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ClientEntity {
  id: ID
  attributes: Client
}

type ClientEntityResponse {
  data: ClientEntity
}

type ClientEntityResponseCollection {
  data: [ClientEntity!]!
  meta: ResponseCollectionMeta!
}

union SettingFooterDynamicZone = ComponentFooterColumn | Error

scalar SettingFooterDynamicZoneInput

input SettingInput {
  socialMedia: [ComponentOthersPagesSocialMediaInput]
  settingsPages: [ComponentOthersSettingPageInput]
  footer: [SettingFooterDynamicZoneInput!]
}

type Setting {
  socialMedia(
    filters: ComponentOthersPagesSocialMediaFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersPagesSocialMedia]!
  settingsPages(
    filters: ComponentOthersSettingPageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentOthersSettingPage]!
  footer: [SettingFooterDynamicZone]!
  createdAt: DateTime
  updatedAt: DateTime
}

type SettingEntity {
  id: ID
  attributes: Setting
}

type SettingEntityResponse {
  data: SettingEntity
}

enum ENUM_TAG_TYP {
  other
  city
  countie
  service
}

union TagContentpartsDynamicZone = ComponentContentPartsTxt | Error

scalar TagContentpartsDynamicZoneInput

input TagFiltersInput {
  id: IDFilterInput
  typ: StringFilterInput
  title: StringFilterInput
  lead: ComponentContentPartsLeadFiltersInput
  views: ComponentStatsViewsFiltersInput
  articles: ArticleFiltersInput
  seo: ComponentOthersSeoFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [TagFiltersInput]
  or: [TagFiltersInput]
  not: TagFiltersInput
}

input TagInput {
  typ: ENUM_TAG_TYP
  title: String
  cover: ID
  lead: ComponentContentPartsLeadInput
  contentparts: [TagContentpartsDynamicZoneInput!]
  views: ComponentStatsViewsInput
  articles: [ID]
  seo: ComponentOthersSeoInput
  publishedAt: DateTime
}

type Tag {
  typ: ENUM_TAG_TYP!
  title: String!
  cover: UploadFileEntityResponse!
  lead: ComponentContentPartsLead!
  contentparts: [TagContentpartsDynamicZone]!
  views: ComponentStatsViews
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleRelationResponseCollection
  seo: ComponentOthersSeo!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TagEntity {
  id: ID
  attributes: Tag
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  avatar: ID
  articles: [ID]
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  avatar: UploadFileEntityResponse
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

union GenericMorph =
    ComponentContentPartsLead
  | ComponentContentPartsMaps
  | ComponentContentPartsMedia
  | ComponentContentPartsQuote
  | ComponentContentPartsTxt
  | ComponentContentPartsYouTube
  | ComponentContentPartsYoutube
  | ComponentFooterColumn
  | ComponentOthersAdress
  | ComponentOthersCompanyData
  | ComponentOthersEmail
  | ComponentOthersLink
  | ComponentOthersLinksList
  | ComponentOthersPagesSocialMedia
  | ComponentOthersPhone
  | ComponentOthersSeo
  | ComponentOthersSettingPage
  | ComponentOthersSiteBarFilters
  | ComponentStatsViews
  | Article
  | Client
  | Setting
  | Tag
  | UploadFile
  | UploadFolder
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  article(id: ID): ArticleEntityResponse
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleEntityResponseCollection
  client(id: ID): ClientEntityResponse
  clients(
    filters: ClientFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ClientEntityResponseCollection
  setting: SettingEntityResponse
  tag(id: ID): TagEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TagEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createArticle(data: ArticleInput!): ArticleEntityResponse
  updateArticle(id: ID!, data: ArticleInput!): ArticleEntityResponse
  deleteArticle(id: ID!): ArticleEntityResponse
  createClient(data: ClientInput!): ClientEntityResponse
  updateClient(id: ID!, data: ClientInput!): ClientEntityResponse
  deleteClient(id: ID!): ClientEntityResponse
  updateSetting(data: SettingInput!): SettingEntityResponse
  deleteSetting: SettingEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  updateTag(id: ID!, data: TagInput!): TagEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type SearchResults {
  hits: [Article]
}

type Query {
  searchResults(query: String!): SearchResults!
}
